--- ../src-base/minecraft/net/minecraft/block/Block.java
+++ ../src-work/minecraft/net/minecraft/block/Block.java
@@ -2,13 +2,17 @@
 
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 import net.minecraft.block.material.Material;
+import net.minecraft.client.particle.EffectRenderer;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.player.EntityPlayer;
@@ -24,17 +28,23 @@
 import net.minecraft.item.ItemSlab;
 import net.minecraft.item.ItemStack;
 import net.minecraft.stats.StatList;
+import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntitySign;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.MovingObjectPosition;
-import net.minecraft.util.StatCollector;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldProviderEnd;
+
+import net.minecraftforge.common.*;
+import static net.minecraftforge.common.ForgeDirection.*;
 
 public class Block
 {
+    protected static int[] blockFireSpreadSpeed = new int[4096];
+    protected static int[] blockFlammability = new int[4096];
+    protected String currentTexture = "/terrain.png";
+    public boolean isDefaultTexture = true;
     private CreativeTabs field_71969_a;
     public static final StepSound field_71966_d = new StepSound("stone", 1.0F, 1.0F);
     public static final StepSound field_71967_e = new StepSound("wood", 1.0F, 1.0F);
@@ -220,7 +230,7 @@
     public float field_72016_cq;
     private String field_71968_b;
 
-    protected Block(int p_i4009_1_, Material p_i4009_2_)
+    public Block(int p_i4009_1_, Material p_i4009_2_)
     {
         this.field_72030_cd = true;
         this.field_72027_ce = true;
@@ -242,6 +252,7 @@
             field_71971_o[p_i4009_1_] = this.func_71926_d() ? 255 : 0;
             field_71985_p[p_i4009_1_] = !p_i4009_2_.func_76228_b();
         }
+        isDefaultTexture = (getTextureFile() != null && getTextureFile().equalsIgnoreCase("/terrain.png"));
     }
 
     public Block func_71912_p()
@@ -254,7 +265,7 @@
     {
     }
 
-    protected Block(int p_i4010_1_, int p_i4010_2_, Material p_i4010_3_)
+    public Block(int p_i4010_1_, int p_i4010_2_, Material p_i4010_3_)
     {
         this(p_i4010_1_, p_i4010_3_);
         this.field_72059_bZ = p_i4010_2_;
@@ -339,9 +350,10 @@
         return this.field_72028_cf;
     }
 
+    @Deprecated //Forge: New Metadata sensitive version.
     public boolean func_71887_s()
     {
-        return this.field_72025_cg;
+        return hasTileEntity(0);
     }
 
     public final void func_71905_a(float p_71905_1_, float p_71905_2_, float p_71905_3_, float p_71905_4_, float p_71905_5_, float p_71905_6_)
@@ -357,13 +369,13 @@
     @SideOnly(Side.CLIENT)
     public float func_71870_f(IBlockAccess p_71870_1_, int p_71870_2_, int p_71870_3_, int p_71870_4_)
     {
-        return p_71870_1_.func_72808_j(p_71870_2_, p_71870_3_, p_71870_4_, field_71984_q[p_71870_1_.func_72798_a(p_71870_2_, p_71870_3_, p_71870_4_)]);
+        return p_71870_1_.func_72808_j(p_71870_2_, p_71870_3_, p_71870_4_, getLightValue(p_71870_1_, p_71870_2_, p_71870_3_, p_71870_4_));
     }
 
     @SideOnly(Side.CLIENT)
     public int func_71874_e(IBlockAccess p_71874_1_, int p_71874_2_, int p_71874_3_, int p_71874_4_)
     {
-        return p_71874_1_.func_72802_i(p_71874_2_, p_71874_3_, p_71874_4_, field_71984_q[p_71874_1_.func_72798_a(p_71874_2_, p_71874_3_, p_71874_4_)]);
+        return p_71874_1_.func_72802_i(p_71874_2_, p_71874_3_, p_71874_4_, getLightValue(p_71874_1_, p_71874_2_, p_71874_3_, p_71874_4_));
     }
 
     @SideOnly(Side.CLIENT)
@@ -457,6 +469,10 @@
 
     public void func_71852_a(World p_71852_1_, int p_71852_2_, int p_71852_3_, int p_71852_4_, int p_71852_5_, int p_71852_6_)
     {
+        if (hasTileEntity(p_71852_6_) && !(this instanceof BlockContainer))
+        {
+            p_71852_1_.func_72932_q(p_71852_2_, p_71852_3_, p_71852_4_);
+        }
     }
 
     public int func_71925_a(Random p_71925_1_)
@@ -471,8 +487,7 @@
 
     public float func_71908_a(EntityPlayer p_71908_1_, World p_71908_2_, int p_71908_3_, int p_71908_4_, int p_71908_5_)
     {
-        float var6 = this.func_71934_m(p_71908_2_, p_71908_3_, p_71908_4_, p_71908_5_);
-        return var6 < 0.0F ? 0.0F : (!p_71908_1_.func_71062_b(this) ? 1.0F / var6 / 100.0F : p_71908_1_.func_71055_a(this) / var6 / 30.0F);
+        return ForgeHooks.blockStrength(this, p_71908_1_, p_71908_2_, p_71908_3_, p_71908_4_, p_71908_5_);
     }
 
     public final void func_71897_c(World p_71897_1_, int p_71897_2_, int p_71897_3_, int p_71897_4_, int p_71897_5_, int p_71897_6_)
@@ -484,18 +499,13 @@
     {
         if (!p_71914_1_.field_72995_K)
         {
-            int var8 = this.func_71910_a(p_71914_7_, p_71914_1_.field_73012_v);
-
-            for (int var9 = 0; var9 < var8; ++var9)
+            ArrayList<ItemStack> items = getBlockDropped(p_71914_1_, p_71914_2_, p_71914_3_, p_71914_4_, p_71914_5_, p_71914_7_);
+            
+            for (ItemStack item : items)
             {
                 if (p_71914_1_.field_73012_v.nextFloat() <= p_71914_6_)
                 {
-                    int var10 = this.func_71885_a(p_71914_5_, p_71914_1_.field_73012_v, p_71914_7_);
-
-                    if (var10 > 0)
-                    {
-                        this.func_71929_a(p_71914_1_, p_71914_2_, p_71914_3_, p_71914_4_, new ItemStack(var10, 1, this.func_71899_b(p_71914_5_)));
-                    }
+                    this.func_71929_a(p_71914_1_, p_71914_2_, p_71914_3_, p_71914_4_, item);
                 }
             }
         }
@@ -792,7 +802,7 @@
         p_71893_2_.func_71064_a(StatList.field_75934_C[this.field_71990_ca], 1);
         p_71893_2_.func_71020_j(0.025F);
 
-        if (this.func_71906_q_() && EnchantmentHelper.func_77502_d(p_71893_2_))
+        if (this.canSilkHarvest(p_71893_1_, p_71893_2_, p_71893_3_, p_71893_4_, p_71893_5_, p_71893_6_) && EnchantmentHelper.func_77502_d(p_71893_2_))
         {
             ItemStack var8 = this.func_71880_c_(p_71893_6_);
 
@@ -808,9 +818,11 @@
         }
     }
 
+    private int silk_check_meta = -1; //Dirty hack to stop us from needing to special case the silk check hook.
+    
     protected boolean func_71906_q_()
     {
-        return this.func_71886_c() && !this.field_72025_cg;
+        return this.func_71886_c() && !this.hasTileEntity(silk_check_meta);
     }
 
     protected ItemStack func_71880_c_(int p_71880_1_)
@@ -1011,5 +1023,865 @@
 
         field_71985_p[0] = true;
         StatList.func_75922_b();
+    }
+    
+    /* =================================================== FORGE START =====================================*/
+    /**
+     * Get a light value for the block at the specified coordinates, normal ranges are between 0 and 15
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return The light value
+     */
+    public int getLightValue(IBlockAccess world, int x, int y, int z)
+    {
+        Block block = field_71973_m[world.func_72798_a(x, y, z)];
+        if (block != null && block != this)
+        {
+            return block.getLightValue(world, x, y, z);
+        }
+        return field_71984_q[field_71990_ca];
+    }
+    
+    /**
+     * Checks if a player or entity can use this block to 'climb' like a ladder.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return True if the block should act like a ladder
+     */
+    public boolean isLadder(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Return true if the block is a normal, solid cube.  This
+     * determines indirect power state, entity ejection from blocks, and a few
+     * others.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return True if the block is a full cube
+     */
+    public boolean isBlockNormalCube(World world, int x, int y, int z)
+    {
+        return field_72018_cp.func_76218_k() && func_71886_c();
+    }
+    
+    /**
+     * Checks if the block is a solid face on the given side, used by placement logic.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @param side The side to check
+     * @return True if the block is solid on the specified side.
+     */
+    public boolean isBlockSolidOnSide(World world, int x, int y, int z, ForgeDirection side)
+    {
+        int meta = world.func_72805_g(x, y, z);
+        if (this instanceof BlockHalfSlab)
+        {
+            return (((meta & 8) == 8 && (side == UP)) || func_71926_d());
+        }
+        else if (this instanceof BlockFarmland)
+        {
+            return (side != DOWN && side != UP);
+        }
+        else if (this instanceof BlockStairs)
+        {
+            boolean flipped = ((meta & 4) != 0);
+            return ((meta & 3) + side.ordinal() == 5) || (side == UP && flipped);
+        }
+        return isBlockNormalCube(world, x, y, z);
+    }
+    
+    /**
+     * Determines if a new block can be replace the space occupied by this one,
+     * Used in the player's placement code to make the block act like water, and lava.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return True if the block is replaceable by another block
+     */
+    public boolean isBlockReplaceable(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Determines if this block should set fire and deal fire damage
+     * to entities coming into contact with it.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return True if the block should deal damage
+     */
+    public boolean isBlockBurning(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Determines this block should be treated as an air block
+     * by the rest of the code. This method is primarily
+     * useful for creating pure logic-blocks that will be invisible
+     * to the player and otherwise interact as air would.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return True if the block considered air
+     */
+    public boolean isAirBlock(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Determines if the player can harvest this block, obtaining it's drops when the block is destroyed.
+     *
+     * @param player The player damaging the block, may be null
+     * @param meta The block's current metadata
+     * @return True to spawn the drops
+     */
+    public boolean canHarvestBlock(EntityPlayer player, int meta)
+    {
+        return ForgeHooks.canHarvestBlock(this, player, meta);
+    }
+    
+    /**
+     * Called when a player removes a block.  This is responsible for
+     * actually destroying the block, and the block is intact at time of call.
+     * This is called regardless of whether the player can harvest the block or
+     * not.
+     *
+     * Return true if the block is actually destroyed.
+     *
+     * Note: When used in multiplayer, this is called on both client and
+     * server sides!
+     *
+     * @param world The current world
+     * @param player The player damaging the block, may be null
+     * @param x X Position
+     * @param y Y position
+     * @param z Z position
+     * @return True if the block is actually destroyed.
+     */
+    public boolean removeBlockByPlayer(World world, EntityPlayer player, int x, int y, int z)
+    {
+        return world.func_72859_e(x, y, z, 0);
+    }
+    
+    /**
+     * Called when a new CreativeContainer is opened, populate the list
+     * with all of the items for this block you want a player in creative mode
+     * to have access to.
+     *
+     * @param itemList The list of items to display on the creative inventory.
+     */
+    public void addCreativeItems(ArrayList itemList)
+    {
+    }
+    
+    /**
+     * Chance that fire will spread and consume this block.
+     * 300 being a 100% chance, 0, being a 0% chance.
+     *
+     * @param world The current world
+     * @param x The blocks X position
+     * @param y The blocks Y position
+     * @param z The blocks Z position
+     * @param metadata The blocks current metadata
+     * @param face The face that the fire is coming from
+     * @return A number ranging from 0 to 300 relating used to determine if the block will be consumed by fire
+     */
+    public int getFlammability(IBlockAccess world, int x, int y, int z, int metadata, ForgeDirection face)
+    {
+        return blockFlammability[field_71990_ca];
+    }
+    
+    /**
+     * Called when fire is updating, checks if a block face can catch fire.
+     *
+     *
+     * @param world The current world
+     * @param x The blocks X position
+     * @param y The blocks Y position
+     * @param z The blocks Z position
+     * @param metadata The blocks current metadata
+     * @param face The face that the fire is coming from
+     * @return True if the face can be on fire, false otherwise.
+     */
+    public boolean isFlammable(IBlockAccess world, int x, int y, int z, int metadata, ForgeDirection face)
+    {
+        return getFlammability(world, x, y, z, metadata, face) > 0;
+    }
+    
+    /**
+     * Called when fire is updating on a neighbor block.
+     * The higher the number returned, the faster fire will spread around this block.
+     *
+     * @param world The current world
+     * @param x The blocks X position
+     * @param y The blocks Y position
+     * @param z The blocks Z position
+     * @param metadata The blocks current metadata
+     * @param face The face that the fire is coming from
+     * @return A number that is used to determine the speed of fire growth around the block
+     */
+    public int getFireSpreadSpeed(World world, int x, int y, int z, int metadata, ForgeDirection face)
+    {
+        return blockFireSpreadSpeed[field_71990_ca];
+    }
+    
+    /**
+     * Currently only called by fire when it is on top of this block.
+     * Returning true will prevent the fire from naturally dying during updating.
+     * Also prevents firing from dying from rain.
+     *
+     * @param world The current world
+     * @param x The blocks X position
+     * @param y The blocks Y position
+     * @param z The blocks Z position
+     * @param metadata The blocks current metadata
+     * @param side The face that the fire is coming from
+     * @return True if this block sustains fire, meaning it will never go out.
+     */
+    public boolean isFireSource(World world, int x, int y, int z, int metadata, ForgeDirection side)
+    {
+        if (field_71990_ca == Block.field_72012_bb.field_71990_ca && side == UP)
+        {
+            return true;
+        }
+        if ((world.field_73011_w instanceof WorldProviderEnd) && field_71990_ca == Block.field_71986_z.field_71990_ca && side == UP)
+        {
+            return true;
+        }
+        return false;
+    }
+    
+    /**
+     * Called by BlockFire to setup the burn values of vanilla blocks.
+     * @param id The block id
+     * @param encouragement How much the block encourages fire to spread
+     * @param flammability how easy a block is to catch fire
+     */
+    public static void setBurnProperties(int id, int encouragement, int flammability)
+    {
+        blockFireSpreadSpeed[id] = encouragement;
+        blockFlammability[id] = flammability;
+    }
+    
+    /**
+     * Called throughout the code as a replacement for block instanceof BlockContainer
+     * Moving this to the Block base class allows for mods that wish to extend vinella
+     * blocks, and also want to have a tile entity on that block, may.
+     *
+     * Return true from this function to specify this block has a tile entity.
+     *
+     * @param metadata Metadata of the current block
+     * @return True if block has a tile entity, false otherwise
+     */
+    public boolean hasTileEntity(int metadata)
+    {
+        return field_72025_cg;
+    }
+    
+    /**
+     * Called throughout the code as a replacement for BlockContainer.getBlockEntity
+     * Return the same thing you would from that function.
+     * This will fall back to BlockContainer.getBlockEntity if this block is a BlockContainer.
+     *
+     * @param metadata The Metadata of the current block
+     * @return A instance of a class extending TileEntity
+     */
+    public TileEntity createTileEntity(World world, int metadata)
+    {
+        if (this instanceof BlockContainer)
+        {
+            return ((BlockContainer)this).createNewTileEntity(world, metadata);
+        }
+        return null;
+    }
+    
+    /**
+     * Metadata and fortune sensitive version, this replaces the old (int meta, Random rand)
+     * version in 1.1.
+     *
+     * @param meta Blocks Metadata
+     * @param fortune Current item fortune level
+     * @param random Random number generator
+     * @return The number of items to drop
+     */
+    public int quantityDropped(int meta, int fortune, Random random)
+    {
+        return func_71910_a(fortune, random);
+    }
+    
+    /**
+     * This returns a complete list of items dropped from this block.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param metadata Current metadata
+     * @param fortune Breakers fortune level
+     * @return A ArrayList containing all items this block drops
+     */
+    public ArrayList<ItemStack> getBlockDropped(World world, int x, int y, int z, int metadata, int fortune)
+    {
+        ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
+    
+        int count = quantityDropped(metadata, fortune, world.field_73012_v);
+        for(int i = 0; i < count; i++)
+        {
+            int id = func_71885_a(metadata, world.field_73012_v, fortune);
+            if (id > 0)
+            {
+                ret.add(new ItemStack(id, 1, func_71899_b(metadata)));
+            }
+        }
+        return ret;
+    }
+    
+    /**
+     * Return true from this function if the player with silk touch can harvest this block directly, and not it's normal drops.
+     *
+     * @param world The world
+     * @param player The player doing the harvesting
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param metadata The metadata
+     * @return True if the block can be directly harvested using silk touch
+     */
+    public boolean canSilkHarvest(World world, EntityPlayer player, int x, int y, int z, int metadata)
+    {
+        silk_check_meta = metadata;
+        boolean ret = this.func_71906_q_();
+        silk_check_meta = 0;
+        return ret;
+    }
+    
+    /**
+     * Determines if a specified mob type can spawn on this block, returning false will
+     * prevent any mob from spawning on the block.
+     *
+     * @param type The Mob Category Type
+     * @param world The current world
+     * @param x The X Position
+     * @param y The Y Position
+     * @param z The Z Position
+     * @return True to allow a mob of the specified category to spawn, false to prevent it.
+     */
+    public boolean canCreatureSpawn(EnumCreatureType type, World world, int x, int y, int z)
+    {
+        int meta = world.func_72805_g(x, y, z);
+        if (this instanceof BlockStep)
+        {
+            return (((meta & 8) == 8) || func_71926_d());
+        }
+        else if (this instanceof BlockStairs)
+        {
+            return ((meta & 4) != 0);
+        }
+        return isBlockSolidOnSide(world, x, y, z, UP);
+    }
+    
+    /**
+     * Determines if this block is classified as a Bed, Allowing
+     * players to sleep in it, though the block has to specifically
+     * perform the sleeping functionality in it's activated event.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param player The player or camera entity, null in some cases.
+     * @return True to treat this as a bed
+     */
+    public boolean isBed(World world, int x, int y, int z, EntityLiving player)
+    {
+        return field_71990_ca == Block.field_71959_S.field_71990_ca;
+    }
+    
+    /**
+     * Returns the position that the player is moved to upon
+     * waking up, or respawning at the bed.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param player The player or camera entity, null in some cases.
+     * @return The spawn position
+     */
+    public ChunkCoordinates getBedSpawnPosition(World world, int x, int y, int z, EntityPlayer player)
+    {
+        return BlockBed.func_72226_b(world, x, y, z, 0);
+    }
+    
+    /**
+     * Called when a user either starts or stops sleeping in the bed.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param player The player or camera entity, null in some cases.
+     * @param occupied True if we are occupying the bed, or false if they are stopping use of the bed
+     */
+    public void setBedOccupied(World world, int x, int y, int z, EntityPlayer player, boolean occupied)
+    {
+        BlockBed.func_72228_a(world,  x, y, z, occupied);
+    }
+    
+    /**
+     * Returns the direction of the block. Same values that
+     * are returned by BlockDirectional
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return Bed direction
+     */
+    public int getBedDirection(IBlockAccess world, int x, int y, int z)
+    {
+        return BlockBed.func_72217_d(world.func_72805_g(x,  y, z));
+    }
+    
+    /**
+     * Determines if the current block is the foot half of the bed.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return True if the current block is the foot side of a bed.
+     */
+    public boolean isBedFoot(IBlockAccess world, int x, int y, int z)
+    {
+        return BlockBed.func_72229_a_(world.func_72805_g(x,  y, z));
+    }
+    
+    /**
+     * Called when a leaf should start its decay process.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     */
+    public void beginLeavesDecay(World world, int x, int y, int z){}
+    
+    /**
+     * Determines if this block can prevent leaves connected to it from decaying.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return true if the presence this block can prevent leaves from decaying.
+     */
+    public boolean canSustainLeaves(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Determines if this block is considered a leaf block, used to apply the leaf decay and generation system.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return true if this block is considered leaves.
+     */
+    public boolean isLeaves(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Used during tree growth to determine if newly generated leaves can replace this block.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return true if this block can be replaced by growing leaves.
+     */
+    public boolean canBeReplacedByLeaves(World world, int x, int y, int z)
+    {
+        return !Block.field_71970_n[this.field_71990_ca];
+    }
+    
+    /**
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return  true if the block is wood (logs)
+     */
+    public boolean isWood(World world, int x, int y, int z)
+    {
+         return false;
+    }
+    
+    /**
+     * Determines if the current block is replaceable by Ore veins during world generation.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return True to allow this block to be replaced by a ore
+     */
+    public boolean isGenMineableReplaceable(World world, int x, int y, int z)
+    {
+        return field_71990_ca == field_71981_t.field_71990_ca;
+    }
+    
+    /**
+     * Grabs the current texture file used for this block
+     */
+    public String getTextureFile()
+    {
+        return currentTexture;
+    }
+    
+    /**
+     * Sets the current texture file for this block, used when rendering.
+     * Default is "/terrain.png"
+     *
+     * @param texture The texture file
+     */
+    public Block setTextureFile(String texture)
+    {
+        currentTexture = texture;
+        isDefaultTexture = false;
+        return this;
+    }
+    
+    
+    /**
+     * Location sensitive version of getExplosionRestance
+     *
+     * @param par1Entity The entity that caused the explosion
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param explosionX Explosion source X Position
+     * @param explosionY Explosion source X Position
+     * @param explosionZ Explosion source X Position
+     * @return The amount of the explosion absorbed.
+     */
+    public float getExplosionResistance(Entity par1Entity, World world, int x, int y, int z, double explosionX, double explosionY, double explosionZ)
+    {
+        return func_71904_a(par1Entity);
+    }
+    
+    /**
+     * Determine if this block can make a redstone connection on the side provided,
+     * Useful to control which sides are inputs and outputs for redstone wires.
+     *
+     * Side:
+     *  -1: UP
+     *   0: NORTH
+     *   1: EAST
+     *   2: SOUTH
+     *   3: WEST
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param side The side that is trying to make the connection
+     * @return True to make the connection
+     */
+    public boolean canConnectRedstone(IBlockAccess world, int x, int y, int z, int side)
+    {
+        return Block.field_71973_m[field_71990_ca].func_71853_i() && side != -1;
+    }
+    
+    /**
+     * Determines if a torch can be placed on the top surface of this block.
+     * Useful for creating your own block that torches can be on, such as fences.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return True to allow the torch to be placed
+     */
+    public boolean canPlaceTorchOnTop(World world, int x, int y, int z)
+    {
+        if (world.func_72797_t(x, y, z))
+        {
+            return true;
+        }
+        else
+        {
+            int id = world.func_72798_a(x, y, z);
+            return id == Block.field_72031_aZ.field_71990_ca || id == Block.field_72098_bB.field_71990_ca || id == Block.field_71946_M.field_71990_ca || id == Block.field_82515_ce.field_71990_ca;
+        }
+    }
+    
+    
+    /**
+     * Determines if this block should render in this pass.
+     *
+     * @param pass The pass in question
+     * @return True to render
+     */
+    public boolean canRenderInPass(int pass)
+    {
+        return pass == func_71856_s_();
+    }
+    
+    /**
+     * Called when a user uses the creative pick block button on this block
+     *
+     * @param target The full target the player is looking at
+     * @return A ItemStack to add to the player's inventory, Null if nothing should be added.
+     */
+    public ItemStack getPickBlock(MovingObjectPosition target, World world, int x, int y, int z)
+    {
+        int id = func_71922_a(world, x, y, z);
+    
+        if (id == 0)
+        {
+            return null;
+        }
+    
+        Item item = Item.field_77698_e[id];
+        if (item == null)
+        {
+            return null;
+        }
+    
+        return new ItemStack(id, 1, func_71873_h(world, x, y, z));
+    }
+    
+    /**
+     * Used by getTopSolidOrLiquidBlock while placing biome decorations, villages, etc
+     * Also used to determine if the player can spawn on this block.
+     *
+     * @return False to disallow spawning
+     */
+    public boolean isBlockFoliage(World world, int x, int y, int z)
+    {
+        return false;
+    }
+    
+    /**
+     * Spawn a digging particle effect in the world, this is a wrapper
+     * around EffectRenderer.addBlockHitEffects to allow the block more
+     * control over the particles. Useful when you have entirely different
+     * texture sheets for different sides/locations in the world.
+     *
+     * @param worldObj The current world
+     * @param target The target the player is looking at {x/y/z/side/sub}
+     * @param effectRenderer A reference to the current effect renderer.
+     * @return True to prevent vanilla digging particles form spawning.
+     */
+    @SideOnly(Side.CLIENT)
+    public boolean addBlockHitEffects(World worldObj, MovingObjectPosition target, EffectRenderer effectRenderer)
+    {
+        return false;
+    }
+    
+    /**
+     * Spawn particles for when the block is destroyed. Due to the nature
+     * of how this is invoked, the x/y/z locations are not always guaranteed
+     * to host your block. So be sure to do proper sanity checks before assuming
+     * that the location is this block.
+     *
+     * @param world The current world
+     * @param x X position to spawn the particle
+     * @param y Y position to spawn the particle
+     * @param z Z position to spawn the particle
+     * @param meta The metadata for the block before it was destroyed.
+     * @param effectRenderer A reference to the current effect renderer.
+     * @return True to prevent vanilla break particles from spawning.
+     */
+    @SideOnly(Side.CLIENT)
+    public boolean addBlockDestroyEffects(World world, int x, int y, int z, int meta, EffectRenderer effectRenderer)
+    {
+        return false;
+    }
+    
+    /**
+     * Determines if this block can support the passed in plant, allowing it to be planted and grow.
+     * Some examples:
+     *   Reeds check if its a reed, or if its sand/dirt/grass and adjacent to water
+     *   Cacti checks if its a cacti, or if its sand
+     *   Nether types check for soul sand
+     *   Crops check for tilled soil
+     *   Caves check if it's a colid surface
+     *   Plains check if its grass or dirt
+     *   Water check if its still water
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z position
+     * @param direction The direction relative to the given position the plant wants to be, typically its UP
+     * @param plant The plant that wants to check
+     * @return True to allow the plant to be planted/stay.
+     */
+    public boolean canSustainPlant(World world, int x, int y, int z, ForgeDirection direction, IPlantable plant)
+    {
+        int plantID = plant.getPlantID(world, x, y + 1, z);
+        EnumPlantType plantType = plant.getPlantType(world, x, y + 1, z);
+    
+        if (plantID == field_72038_aV.field_71990_ca && field_71990_ca == field_72038_aV.field_71990_ca)
+        {
+            return true;
+        }
+    
+        if (plantID == field_72040_aX.field_71990_ca && field_71990_ca == field_72040_aX.field_71990_ca)
+        {
+            return true;
+        }
+    
+        if (plant instanceof BlockFlower && ((BlockFlower)plant).func_72263_d_(field_71990_ca))
+        {
+            return true;
+        }
+    
+        switch (plantType)
+        {
+            case Desert: return field_71990_ca == field_71939_E.field_71990_ca;
+            case Nether: return field_71990_ca == field_72013_bc.field_71990_ca;
+            case Crop:   return field_71990_ca == field_72050_aA.field_71990_ca;
+            case Cave:   return isBlockSolidOnSide(world, x, y, z, UP);
+            case Plains: return field_71990_ca == field_71980_u.field_71990_ca || field_71990_ca == field_71979_v.field_71990_ca;
+            case Water:  return world.func_72803_f(x, y, z) == Material.field_76244_g && world.func_72805_g(x, y, z) == 0;
+            case Beach:
+                boolean isBeach = (field_71990_ca == Block.field_71980_u.field_71990_ca || field_71990_ca == Block.field_71979_v.field_71990_ca || field_71990_ca == Block.field_71939_E.field_71990_ca);
+                boolean hasWater = (world.func_72803_f(x - 1, y, z    ) == Material.field_76244_g ||
+                                    world.func_72803_f(x + 1, y, z    ) == Material.field_76244_g ||
+                                    world.func_72803_f(x,     y, z - 1) == Material.field_76244_g ||
+                                    world.func_72803_f(x,     y, z + 1) == Material.field_76244_g);
+                return isBeach && hasWater;
+        }
+    
+        return false;
+    }
+    
+    /**
+     * Called when a plant grows on this block, only implemented for saplings using the WorldGen*Trees classes right now.
+     * Modder may implement this for custom plants.
+     * This does not use ForgeDirection, because large/huge trees can be located in non-representable direction, 
+     * so the source location is specified.
+     * Currently this just changes the block to dirt if it was grass.
+     * 
+     * Note: This happens DURING the generation, the generation may not be complete when this is called.
+     * 
+     * @param world Current world
+     * @param x Soil X
+     * @param y Soil Y
+     * @param z Soil Z
+     * @param sourceX Plant growth location X
+     * @param sourceY Plant growth location Y
+     * @param sourceZ Plant growth location Z
+     */
+    public void onPlantGrow(World world, int x, int y, int z, int sourceX, int sourceY, int sourceZ)
+    {
+        if (field_71990_ca == field_71980_u.field_71990_ca)
+        {
+            world.func_72822_b(x, y, z, field_71979_v.field_71990_ca);
+        }
+    }
+    
+    /**
+     * Checks if this soil is fertile, typically this means that growth rates
+     * of plants on this soil will be slightly sped up.
+     * Only vanilla case is tilledField when it is within range of water.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z position
+     * @return True if the soil should be considered fertile.
+     */
+    public boolean isFertile(World world, int x, int y, int z)
+    {
+        if (field_71990_ca == field_72050_aA.field_71990_ca)
+        {
+            return world.func_72805_g(x, y, z) > 0;
+        }
+    
+        return false;
+    }
+    
+    /**
+     * Location aware and overrideable version of the lightOpacity array,
+     * return the number to subtract from the light value when it passes through this block.
+     *
+     * This is not guaranteed to have the tile entity in place before this is called, so it is
+     * Recommended that you have your tile entity call relight after being placed if you
+     * rely on it for light info.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z position
+     * @return The amount of light to block, 0 for air, 255 for fully opaque.
+     */
+    public int getLightOpacity(World world, int x, int y, int z)
+    {
+        return field_71971_o[field_71990_ca];
+    }
+    
+    /**
+     * Determines if this block is destroyed when a ender dragon tries to fly through it.
+     * The block will be set to 0, nothing will drop.
+     *
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z position
+     * @return True to allow the ender dragon to destroy this block
+     */
+    public boolean canDragonDestroy(World world, int x, int y, int z)
+    {
+        return field_71990_ca != field_72089_ap.field_71990_ca && field_71990_ca != field_72082_bJ.field_71990_ca && field_71990_ca != field_71986_z.field_71990_ca;
+    }
+    
+    /**
+     * Determines if this block can be used as the base of a beacon.
+     *
+     * @param worldObj The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z position
+     * @param beaconX Beacons X Position
+     * @param beaconY Beacons Y Position
+     * @param beaconZ Beacons Z Position
+     * @return True, to support the beacon, and make it active with this block.
+     */
+    public boolean isBeaconBase(World worldObj, int x, int y, int z, int beaconX, int beaconY, int beaconZ)
+    {
+        return (field_71990_ca == field_72076_bV.field_71990_ca || field_71990_ca == field_72105_ah.field_71990_ca || field_71990_ca == field_72071_ax.field_71990_ca || field_71990_ca == field_72083_ai.field_71990_ca);
     }
 }
