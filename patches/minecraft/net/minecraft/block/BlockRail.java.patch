--- a/net/minecraft/block/BlockRail.java
+++ b/net/minecraft/block/BlockRail.java
@@ -3,12 +3,16 @@
 import java.util.Random;
 import net.minecraft.block.material.Material;
 import net.minecraft.creativetab.CreativeTabs;
+import net.minecraft.entity.item.EntityMinecart;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import net.minecraftforge.common.ForgeDirection;
+import static net.minecraftforge.common.ForgeDirection.*;
+
 public class BlockRail extends Block
 {
     private final boolean field_72186_a;
@@ -16,12 +20,12 @@
     public static final boolean func_72180_d_(World p_72180_0_, int p_72180_1_, int p_72180_2_, int p_72180_3_)
     {
         int var4 = p_72180_0_.func_72798_a(p_72180_1_, p_72180_2_, p_72180_3_);
-        return var4 == Block.field_72056_aG.field_71990_ca || var4 == Block.field_71954_T.field_71990_ca || var4 == Block.field_71953_U.field_71990_ca;
+        return func_72184_d(var4);
     }
 
     public static final boolean func_72184_d(int p_72184_0_)
     {
-        return p_72184_0_ == Block.field_72056_aG.field_71990_ca || p_72184_0_ == Block.field_71954_T.field_71990_ca || p_72184_0_ == Block.field_71953_U.field_71990_ca;
+        return Block.field_71973_m[p_72184_0_] instanceof BlockRail;
     }
 
     protected BlockRail(int p_i3984_1_, int p_i3984_2_, boolean p_i3984_3_)
@@ -91,7 +95,7 @@
 
     public int func_71857_b()
     {
-        return 9;
+        return renderType;
     }
 
     public int func_71925_a(Random p_71925_1_)
@@ -101,7 +105,7 @@
 
     public boolean func_71930_b(World p_71930_1_, int p_71930_2_, int p_71930_3_, int p_71930_4_)
     {
-        return p_71930_1_.func_72797_t(p_71930_2_, p_71930_3_ - 1, p_71930_4_);
+        return p_71930_1_.isBlockSolidOnSide(p_71930_2_, p_71930_3_ - 1, p_71930_4_, UP);
     }
 
     public void func_71861_g(World p_71861_1_, int p_71861_2_, int p_71861_3_, int p_71861_4_)
@@ -131,27 +135,27 @@
 
             boolean var8 = false;
 
-            if (!p_71863_1_.func_72797_t(p_71863_2_, p_71863_3_ - 1, p_71863_4_))
-            {
-                var8 = true;
-            }
-
-            if (var7 == 2 && !p_71863_1_.func_72797_t(p_71863_2_ + 1, p_71863_3_, p_71863_4_))
-            {
-                var8 = true;
-            }
-
-            if (var7 == 3 && !p_71863_1_.func_72797_t(p_71863_2_ - 1, p_71863_3_, p_71863_4_))
-            {
-                var8 = true;
-            }
-
-            if (var7 == 4 && !p_71863_1_.func_72797_t(p_71863_2_, p_71863_3_, p_71863_4_ - 1))
-            {
-                var8 = true;
-            }
-
-            if (var7 == 5 && !p_71863_1_.func_72797_t(p_71863_2_, p_71863_3_, p_71863_4_ + 1))
+            if (!p_71863_1_.isBlockSolidOnSide(p_71863_2_, p_71863_3_ - 1, p_71863_4_, UP))
+            {
+                var8 = true;
+            }
+
+            if (var7 == 2 && !p_71863_1_.isBlockSolidOnSide(p_71863_2_ + 1, p_71863_3_, p_71863_4_, UP))
+            {
+                var8 = true;
+            }
+
+            if (var7 == 3 && !p_71863_1_.isBlockSolidOnSide(p_71863_2_ - 1, p_71863_3_, p_71863_4_, UP))
+            {
+                var8 = true;
+            }
+
+            if (var7 == 4 && !p_71863_1_.isBlockSolidOnSide(p_71863_2_, p_71863_3_, p_71863_4_ - 1, UP))
+            {
+                var8 = true;
+            }
+
+            if (var7 == 5 && !p_71863_1_.isBlockSolidOnSide(p_71863_2_, p_71863_3_, p_71863_4_ + 1, UP))
             {
                 var8 = true;
             }
@@ -343,8 +347,135 @@
         return 0;
     }
 
+    /**
+     * @deprecated
+     * This function is no longer called by Minecraft
+     */
+    @Deprecated
     static boolean func_72179_a(BlockRail p_72179_0_)
     {
         return p_72179_0_.field_72186_a;
+    }
+    
+    /**
+     * Return true if the rail can make corners.
+     * Used by placement logic.
+     * @param world The world.
+     * @param x The rail X coordinate.
+     * @param y The rail Y coordinate.
+     * @param z The rail Z coordinate.
+     * @return True if the rail can make corners.
+     */
+    public boolean isFlexibleRail(World world, int y, int x, int z)
+    {
+        return !field_72186_a;
+    }
+    
+    /**
+     * Returns true if the rail can make up and down slopes.
+     * Used by placement logic.
+     * @param world The world.
+     * @param x The rail X coordinate.
+     * @param y The rail Y coordinate.
+     * @param z The rail Z coordinate.
+     * @return True if the rail can make slopes.
+     */
+    public boolean canMakeSlopes(World world, int x, int y, int z)
+    {
+        return true;
+    }
+    
+    /**
+     * Return the rails metadata (without the power bit if the rail uses one).
+     * Can be used to make the cart think the rail something other than it is,
+     * for example when making diamond junctions or switches.
+     * The cart parameter will often be null unless it it called from EntityMinecart.
+     * 
+     * Valid rail metadata is defined as follows:
+     * 0x0: flat track going North-South
+     * 0x1: flat track going West-East
+     * 0x2: track ascending to the East
+     * 0x3: track ascending to the West
+     * 0x4: track ascending to the North
+     * 0x5: track ascending to the South
+     * 0x6: WestNorth corner (connecting East and South)
+     * 0x7: EastNorth corner (connecting West and South)
+     * 0x8: EastSouth corner (connecting West and North)
+     * 0x9: WestSouth corner (connecting East and North)
+     * 
+     * All directions are Notch defined.
+     * In MC Beta 1.8.3 the Sun rises in the North.
+     * In MC 1.0.0 the Sun rises in the East.
+     * 
+     * @param world The world.
+     * @param cart The cart asking for the metadata, null if it is not called by EntityMinecart.
+     * @param y The rail X coordinate.
+     * @param x The rail Y coordinate.
+     * @param z The rail Z coordinate.
+     * @return The metadata.
+     */
+    public int getBasicRailMetadata(IBlockAccess world, EntityMinecart cart, int x, int y, int z)
+    {
+        int meta = world.func_72805_g(x, y, z);
+        if(field_72186_a)
+        {
+            meta = meta & 7;
+        }
+        return meta;
+    }
+    
+    /**
+     * Returns the max speed of the rail at the specified position.
+     * @param world The world.
+     * @param cart The cart on the rail, may be null.
+     * @param x The rail X coordinate.
+     * @param y The rail Y coordinate.
+     * @param z The rail Z coordinate.
+     * @return The max speed of the current rail.
+     */
+    public float getRailMaxSpeed(World world, EntityMinecart cart, int y, int x, int z)
+    {
+        return 0.4f;
+    }
+    
+    /**
+     * This function is called by any minecart that passes over this rail.
+     * It is called once per update tick that the minecart is on the rail.
+     * @param world The world.
+     * @param cart The cart on the rail.
+     * @param y The rail X coordinate.
+     * @param x The rail Y coordinate.
+     * @param z The rail Z coordinate.
+     */
+    public void onMinecartPass(World world, EntityMinecart cart, int y, int x, int z)
+    {
+    }
+    
+    /**
+     * Return true if this rail uses the 4th bit as a power bit.
+     * Avoid using this function when getBasicRailMetadata() can be used instead.
+     * The only reason to use this function is if you wish to change the rails metadata.
+     * @param world The world.
+     * @param x The rail X coordinate.
+     * @param y The rail Y coordinate.
+     * @param z The rail Z coordinate.
+     * @return True if the 4th bit is a power bit.
+     */
+    public boolean hasPowerBit(World world, int x, int y, int z)
+    {
+        return field_72186_a;
+    }
+    
+    /**
+     * Forge: Moved render type to a field and a setter.
+     * This allows for a mod to change the render type
+     * for vanilla rails, and any mod rails that extend
+     * this class.
+     */
+    private int renderType = 9;
+    
+    public void setRenderType(int value)
+    {
+        renderType = value;
     }
 }
