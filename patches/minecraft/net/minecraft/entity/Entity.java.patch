--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -2,8 +2,12 @@
 
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFluid;
 import net.minecraft.block.StepSound;
@@ -12,21 +16,16 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.enchantment.EnchantmentProtection;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.*;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagDouble;
 import net.minecraft.nbt.NBTTagFloat;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.Direction;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.StatCollector;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
@@ -111,6 +110,11 @@
     protected int field_82152_aq;
     private boolean field_83001_bt;
     public EnumEntitySize field_70168_am;
+    /** Forge: Used to store custom data for each entity. */
+    private NBTTagCompound customEntityData;
+    public boolean captureDrops = false;
+    public ArrayList<EntityItem> capturedDrops = new ArrayList<EntityItem>();
+    private UUID persistentID;
 
     public Entity(World p_i3438_1_)
     {
@@ -404,7 +408,7 @@
         if (!this.field_70170_p.field_72995_K)
         {
             this.func_70052_a(0, this.field_70151_c > 0);
-            this.func_70052_a(2, this.field_70154_o != null);
+            this.func_70052_a(2, this.field_70154_o != null && field_70154_o.shouldRiderSit());
         }
 
         this.field_70148_d = false;
@@ -687,15 +691,18 @@
                     p_70091_5_ = var27;
                     this.field_70121_D.func_72328_c(var29);
                 }
+                /* Fixes a vanilla bug where the player view would dip when stepping between certain blocks
+                 * https://mojang.atlassian.net/browse/MC-1594
                 else
                 {
-                    double var39 = this.field_70121_D.field_72338_b - (double)((int)this.field_70121_D.field_72338_b);
+                    double var39 = this.boundingBox.minY - (double)((int)this.boundingBox.minY);
 
                     if (var39 > 0.0D)
                     {
-                        this.field_70139_V = (float)((double)this.field_70139_V + var39 + 0.01D);
+                        this.ySize = (float)((double)this.ySize + var39 + 0.01D);
                     }
                 }
+                */
             }
 
             this.field_70170_p.field_72984_F.func_76319_b();
@@ -1247,6 +1254,15 @@
             p_70109_1_.func_74768_a("Dimension", this.field_71093_bK);
             p_70109_1_.func_74757_a("Invulnerable", this.field_83001_bt);
             p_70109_1_.func_74768_a("PortalCooldown", this.field_71088_bW);
+            if (persistentID != null)
+            {
+                p_70109_1_.func_74772_a("PersistentIDMSB", persistentID.getMostSignificantBits());
+                p_70109_1_.func_74772_a("PersistentIDLSB", persistentID.getLeastSignificantBits());
+            }
+            if (customEntityData != null)
+            {
+                p_70109_1_.func_74766_a("ForgeData", customEntityData);
+            }
             this.func_70014_b(p_70109_1_);
         }
         catch (Throwable var5)
@@ -1298,6 +1314,14 @@
             this.field_71088_bW = p_70020_1_.func_74762_e("PortalCooldown");
             this.func_70107_b(this.field_70165_t, this.field_70163_u, this.field_70161_v);
             this.func_70101_b(this.field_70177_z, this.field_70125_A);
+            if (p_70020_1_.func_74764_b("ForgeData"))
+            {
+                customEntityData = p_70020_1_.func_74775_l("ForgeData");
+            }
+            if (p_70020_1_.func_74764_b("PersistentIDMSB") && p_70020_1_.func_74764_b("PersistentIDLSB"))
+            {
+                persistentID = new UUID(p_70020_1_.func_74763_f("PersistentIDMSB"), p_70020_1_.func_74763_f("PersistentIDLSB"));
+            }
             this.func_70037_a(p_70020_1_);
         }
         catch (Throwable var5)
@@ -1368,7 +1392,14 @@
     {
         EntityItem var3 = new EntityItem(this.field_70170_p, this.field_70165_t, this.field_70163_u + (double)p_70099_2_, this.field_70161_v, p_70099_1_);
         var3.field_70293_c = 10;
-        this.field_70170_p.func_72838_d(var3);
+        if (captureDrops)
+        {
+            capturedDrops.add(var3);
+        }
+        else
+        {
+            this.field_70170_p.func_72838_d(var3);
+        }
         return var3;
     }
 
@@ -1675,7 +1706,7 @@
 
     public boolean func_70115_ae()
     {
-        return this.field_70154_o != null || this.func_70083_f(2);
+        return (this.field_70154_o != null && field_70154_o.shouldRiderSit()) || this.func_70083_f(2);
     }
 
     public boolean func_70093_af()
@@ -1959,7 +1990,7 @@
 
     public float func_82146_a(Explosion p_82146_1_, Block p_82146_2_, int p_82146_3_, int p_82146_4_, int p_82146_5_)
     {
-        return p_82146_2_.func_71904_a(this);
+        return p_82146_2_.getExplosionResistance(this, field_70170_p, p_82146_3_, p_82146_4_, p_82146_5_, field_70165_t, field_70163_u + (double)func_70047_e(), field_70161_v);
     }
 
     public int func_82143_as()
@@ -1991,5 +2022,98 @@
     public boolean func_90999_ad()
     {
         return this.func_70027_ad();
+    }
+    
+    /* ================================== Forge Start =====================================*/
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+        if (customEntityData == null)
+        {
+            customEntityData = new NBTTagCompound();
+        }
+        return customEntityData;
+    }
+    
+    /**
+     * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.
+     * @return false to prevent an entity that is mounted to this entity from displaying the 'sitting' animation.
+     */
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
+    
+    /**
+     * Called when a user uses the creative pick block button on this entity.
+     *
+     * @param target The full target the player is looking at
+     * @return A ItemStack to add to the player's inventory, Null if nothing should be added.
+     */
+    public ItemStack getPickedResult(MovingObjectPosition target)
+    {
+        if (this instanceof EntityPainting)
+        {
+            return new ItemStack(Item.field_77780_as);
+        }
+        else if (this instanceof EntityMinecart)
+        {
+            return ((EntityMinecart)this).getCartItem();
+        }
+        else if (this instanceof EntityBoat)
+        {
+            return new ItemStack(Item.field_77769_aE);
+        }
+        else if (this instanceof EntityItemFrame)
+        {
+            ItemStack held = ((EntityItemFrame)this).func_82335_i();
+            if (held == null)
+            {
+                return new ItemStack(Item.field_82802_bI);
+            }
+            else
+            {
+                return held.func_77946_l();
+            }
+        }
+        else
+        {
+            int id = EntityList.func_75619_a(this);
+            if (id > 0 && EntityList.field_75627_a.containsKey(id))
+            {
+                return new ItemStack(Item.field_77815_bC, 1, id);
+            }
+        }
+        return null;
+    }
+    
+    public UUID getPersistentID()
+    {
+        return persistentID;
+    }
+    
+    public synchronized void generatePersistentID()
+    {
+        if (persistentID == null)
+        {
+            persistentID = UUID.randomUUID();
+        }
+    }
+    
+    /**
+     * Reset the entity ID to a new value. Not to be used from Mod code
+     */
+    public final void resetEntityId()
+    {
+        this.field_70157_k = field_70152_a++;
+    }
+    
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
     }
 }
