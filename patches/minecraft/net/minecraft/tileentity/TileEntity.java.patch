--- ../src-base/minecraft/net/minecraft/tileentity/TileEntity.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntity.java
@@ -1,14 +1,21 @@
 package net.minecraft.tileentity;
 
+import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.logging.Level;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.TileEntityRecordPlayer;
+import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.INetworkManager;
 import net.minecraft.network.packet.Packet;
+import net.minecraft.network.packet.Packet132TileEntityData;
+import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.world.World;
 
 public class TileEntity
@@ -83,10 +90,12 @@
     public static TileEntity func_70317_c(NBTTagCompound p_70317_0_)
     {
         TileEntity var1 = null;
+        
+        Class var2 = null;
 
         try
         {
-            Class var2 = (Class)field_70326_a.get(p_70317_0_.func_74779_i("id"));
+            var2 = (Class)field_70326_a.get(p_70317_0_.func_74779_i("id"));
 
             if (var2 != null)
             {
@@ -100,7 +109,17 @@
 
         if (var1 != null)
         {
-            var1.func_70307_a(p_70317_0_);
+            try
+            {
+                var1.func_70307_a(p_70317_0_);
+            }
+            catch (Exception e)
+            {
+                FMLLog.log(Level.SEVERE, e,
+                        "A TileEntity %s(%s) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
+                        p_70317_0_.func_74779_i("id"), var2.getName());
+                var1 = null;
+            }
         }
         else
         {
@@ -187,7 +206,7 @@
     public void func_85027_a(CrashReportCategory p_85027_1_)
     {
         p_85027_1_.func_71500_a("Name", new CallableTileEntityName(this));
-        CrashReportCategory.func_85068_a(p_85027_1_, this.field_70329_l, this.field_70330_m, this.field_70327_n, this.field_70324_q.field_71990_ca, this.field_70325_p);
+        CrashReportCategory.func_85068_a(p_85027_1_, this.field_70329_l, this.field_70330_m, this.field_70327_n, this.field_70324_q != null ? this.field_70324_q.field_71990_ca : 0, this.field_70325_p);
     }
 
     static Map func_85028_t()
@@ -212,5 +231,94 @@
         func_70306_a(TileEntityCommandBlock.class, "Control");
         func_70306_a(TileEntityBeacon.class, "Beacon");
         func_70306_a(TileEntitySkull.class, "Skull");
+    }
+    
+    // -- BEGIN FORGE PATCHES --
+    /**
+     * Determines if this TileEntity requires update calls.
+     * @return True if you want updateEntity() to be called, false if not
+     */
+    public boolean canUpdate()
+    {
+        return true;
+    }
+    
+    /**
+     * Called when you receive a TileEntityData packet for the location this
+     * TileEntity is currently in. On the client, the NetworkManager will always
+     * be the remote server. On the server, it will be whomever is responsible for
+     * sending the packet.
+     *
+     * @param net The NetworkManager the packet originated from
+     * @param pkt The data packet
+     */
+    public void onDataPacket(INetworkManager net, Packet132TileEntityData pkt)
+    {
+    }
+    
+    /**
+     * Called when the chunk this TileEntity is on is Unloaded.
+     */
+    public void onChunkUnload()
+    {
+    }
+    
+    /**
+     * Called from Chunk.setBlockIDWithMetadata, determines if this tile entity should be re-created when the ID, or Metadata changes.
+     * Use with caution as this will leave straggler TileEntities, or create conflicts with other TileEntities if not used properly.
+     *
+     * @param oldID The old ID of the block
+     * @param newID The new ID of the block (May be the same)
+     * @param oldMeta The old metadata of the block
+     * @param newMeta The new metadata of the block (May be the same)
+     * @param world Current world
+     * @param x X Postion
+     * @param y Y Position
+     * @param z Z Position
+     * @return True to remove the old tile entity, false to keep it in tact {and create a new one if the new values specify to}
+     */
+    public boolean shouldRefresh(int oldID, int newID, int oldMeta, int newMeta, World world, int x, int y, int z)
+    {
+        return true;
+    }
+    
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
+    /**
+     * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.
+     */
+    public static final AxisAlignedBB INFINITE_EXTENT_AABB = AxisAlignedBB.func_72330_a(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
+    
+    /**
+     * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}
+     * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block
+     * at this location.
+     *
+     * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}
+     */
+    @SideOnly(Side.CLIENT)
+    public AxisAlignedBB getRenderBoundingBox()
+    {
+        AxisAlignedBB bb = INFINITE_EXTENT_AABB;
+        Block type = func_70311_o();
+        if (type == Block.field_72096_bE)
+        {
+            bb = AxisAlignedBB.func_72332_a().func_72299_a(field_70329_l, field_70330_m, field_70327_n, field_70329_l + 1, field_70330_m + 1, field_70327_n + 1);
+        }
+        else if (type == Block.field_72077_au)
+        {
+            bb = AxisAlignedBB.func_72332_a().func_72299_a(field_70329_l - 1, field_70330_m, field_70327_n - 1, field_70329_l + 2, field_70330_m + 1, field_70327_n + 2);
+        }
+        else if (type != null && type != Block.field_82518_cd)
+        {
+            AxisAlignedBB cbb = func_70311_o().func_71872_e(field_70331_k, field_70329_l, field_70330_m, field_70327_n);
+            if (cbb != null)
+            {
+                bb = cbb;
+            }
+        }
+        return bb;
     }
 }
